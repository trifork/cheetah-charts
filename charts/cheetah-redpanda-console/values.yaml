# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

replicaCount: 1

image:
  registry: docker.redpanda.com
  repository: redpandadata/console
  pullPolicy: IfNotPresent
  tag: v2.4.0

podLabels:
  netic.dk/network-component: redpanda
  netic.dk/network-egress: istio
  netic.dk/kafka-client: "true"
  netic.dk/network-rules-egress: redpanda
  netic.dk/schema-registry-egress: redpanda

service:
  type: ClusterIP
  # nodePort: 30001
  # -- Override the value in `console.config.server.listenPort` if not `nil`
  annotations: {}

ingress:
  enabled: false
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

podSecurityContext:
  seccompProfile:
    type: RuntimeDefault
  runAsUser: 99
  fsGroup: 99

securityContext:
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

ports:
  - containerPort: 4180
    protocol: TCP
    name: http-proxy

console:
  config:
    kafka:
      brokers: []
      sasl:
        enabled: true
        mechanism: OAUTHBEARER
        oauth:
          tokenEndpoint:
      schemaRegistry:
        enabled: true
        urls: []
  roles: {}
  roleBindings: {}

oauth2Proxy:
  issuerUrl: ""
  cookieName: __Host{-}_oauth2Proxy
  emailDomain: "*"
  env:
    - name: OAUTH2_PROXY_COOKIE_SECRET
      valueFrom:
        secretKeyRef:
          name: redpanda-oauth2-proxy
          key: cookie-secret
    - name: OAUTH2_PROXY_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: redpanda-oauth2-proxy
          key: client-id
    - name: OAUTH2_PROXY_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: redpanda-oauth2-proxy
          key: client-secret

# The following settings are empty settings from the original values.yaml file

# -- Pull secrets may be used to provide credentials to image repositories
# See https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# -- Override `console.name` template.
nameOverride: ""
# -- Override `console.fullname` template.
fullnameOverride: ""

# -- Automount API credentials for the Service Account into the pod.
automountServiceAccountToken: true

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Specifies whether a service account should automount API-Credentials
  automountServiceAccountToken: true
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.
  # If not set and `serviceAccount.create` is `true`,
  # a name is generated using the `console.fullname` template
  name: ""

# Common labels to add to all the pods
commonLabels: {}

# -- Annotations to add to the deployment.
annotations: {}

podAnnotations: {}

resources:
  limits:
    memory: 64Mi
  requests:
    cpu: 5m
    memory: 16Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

extraContainers: []

tolerations: []

affinity: {}

topologySpreadConstraints: {}

# -- PriorityClassName given to Pods.
# For details,
# see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass).
priorityClassName: ""

# -- Additional environment variables for the Redpanda Console Deployment.
extraEnv: []

# -- Additional environment variables for Redpanda Console mapped from Secret or ConfigMap.
extraEnvFrom: []
# - secretRef:
#     name: kowl-config-secret

# -- Add additional volumes, such as for TLS keys.
extraVolumes: []
# - name: kafka-certs
#   secret:
#     secretName: kafka-certs
# - name: config
#   configMap:
#     name: console-config

extraVolumeMounts: []
# - name: kafka-certs # Must match the volume name
#   mountPath: /etc/kafka/certs
#   readOnly: true

# -- Any initContainers defined should be written here
initContainers:
  # -- Additional set of init containers
  extraInitContainers: |-
#    - name: "test-init-container"
#      image: "mintel/docker-alpine-bash-curl-jq:latest"
#      command: [ "/bin/bash", "-c" ]
#      args:
#        - |
#          set -xe
#          echo "Hello World!"

# -- SecretMounts is an abstraction to make a Secret available in the container's filesystem.
# Under the hood it creates a volume and a volume mount for the Redpanda Console container.
secretMounts: []

# -- Create a new Kubernetes Secret for all sensitive configuration inputs.
# Each provided Secret is mounted automatically and made available to the
# Pod.
# If you want to use one or more existing Secrets,
# you can use the `extraEnvFrom` list to mount environment variables from string and secretMounts to mount files such as Certificates from Secrets.
secret:
  create: true
  # Secret values in case you want the chart to create a Secret. All Certificates are mounted
  # as files and the path to those files are configured through environment variables so
  # that Console can automatically pick them up.
  # -- Kafka Secrets.
  kafka:
    {}
    # saslPassword:
    # awsMskIamSecretKey:
    # tlsCa:
    # tlsCert:
    # tlsKey:
    # tlsPassphrase:
    # schemaRegistryPassword:
    # schemaRegistryTlsCa:
    # schemaRegistryTlsCert:
    # schemaRegistryTlsKey:
    # protobufGitBasicAuthPassword
  # Enterprise version secrets
  # - SSO secrets (Enterprise version).
  login:
    # Configurable JWT value
    jwtSecret: ""
    google:
      {}
      # clientSecret:
      # groupsServiceAccount:
    github:
      {}
      # clientSecret:
      # personalAccessToken:
    okta:
      {}
      # clientSecret:
      # directoryApiToken:
    oidc:
      {}
      # clientSecret:

  enterprise:
    {}
    # license:

  redpanda:
    adminApi:
      {}
      # password:
      # tlsCa:
      # tlsCert:
      # tlsKey:

# -- Settings for license key, as an alternative to secret.enterprise when
# a license secret is available
enterprise:
  licenseSecretRef:
    name: ""
    key: ""

# -- Settings for liveness and readiness probes.
# For details,
# see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes).
livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3
  httpGet:
    path: /ping
    port: http-proxy

readinessProbe:
  # -- Grant time to test connectivity to upstream services such as Kafka and Schema Registry.
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3
  httpGet:
    path: /ping
    port: http-proxy

configmap:
  create: true
deployment:
  create: true
  command: []
  extraArgs: []

strategy: {}
